// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: sbom.proto

package sbom

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HashAlgorithm represents the hashing algorithms used within the Software Bill of Materials (SBOM) document.
// It enumerates various hash algorithms that can be employed to generate checksums or unique identifiers for files or data.
type HashAlgorithm int32

const (
	// Unknown hash algorithm.
	HashAlgorithm_UNKNOWN HashAlgorithm = 0
	// MD5 hash algorithm.
	HashAlgorithm_MD5 HashAlgorithm = 1
	// SHA-1 hash algorithm.
	HashAlgorithm_SHA1 HashAlgorithm = 2
	// SHA-256 hash algorithm.
	HashAlgorithm_SHA256 HashAlgorithm = 3
	// SHA-384 hash algorithm.
	HashAlgorithm_SHA384 HashAlgorithm = 4
	// SHA-512 hash algorithm.
	HashAlgorithm_SHA512 HashAlgorithm = 5
	// SHA3-256 hash algorithm.
	HashAlgorithm_SHA3_256 HashAlgorithm = 6
	// SHA3-384 hash algorithm.
	HashAlgorithm_SHA3_384 HashAlgorithm = 7
	// SHA3-512 hash algorithm.
	HashAlgorithm_SHA3_512 HashAlgorithm = 8
	// BLAKE2B-256 hash algorithm.
	HashAlgorithm_BLAKE2B_256 HashAlgorithm = 9
	// BLAKE2B-384 hash algorithm.
	HashAlgorithm_BLAKE2B_384 HashAlgorithm = 10
	// BLAKE2B-512 hash algorithm.
	HashAlgorithm_BLAKE2B_512 HashAlgorithm = 11
	// BLAKE3 hash algorithm.
	HashAlgorithm_BLAKE3 HashAlgorithm = 12
	// MD2 hash algorithm, not supported by SPDX formats.
	HashAlgorithm_MD2 HashAlgorithm = 13
	// Adler-32 hash algorithm, not supported by SPDX formats..
	HashAlgorithm_ADLER32 HashAlgorithm = 14
	// MD4 hash algorithm, not supported by SPDX formats..
	HashAlgorithm_MD4 HashAlgorithm = 15
	// MD6 hash algorithm, not supported by SPDX formats..
	HashAlgorithm_MD6 HashAlgorithm = 16
	// SHA-224 hash algorithm, not supported by SPDX formats..
	HashAlgorithm_SHA224 HashAlgorithm = 17
)

// Enum value maps for HashAlgorithm.
var (
	HashAlgorithm_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "MD5",
		2:  "SHA1",
		3:  "SHA256",
		4:  "SHA384",
		5:  "SHA512",
		6:  "SHA3_256",
		7:  "SHA3_384",
		8:  "SHA3_512",
		9:  "BLAKE2B_256",
		10: "BLAKE2B_384",
		11: "BLAKE2B_512",
		12: "BLAKE3",
		13: "MD2",
		14: "ADLER32",
		15: "MD4",
		16: "MD6",
		17: "SHA224",
	}
	HashAlgorithm_value = map[string]int32{
		"UNKNOWN":     0,
		"MD5":         1,
		"SHA1":        2,
		"SHA256":      3,
		"SHA384":      4,
		"SHA512":      5,
		"SHA3_256":    6,
		"SHA3_384":    7,
		"SHA3_512":    8,
		"BLAKE2B_256": 9,
		"BLAKE2B_384": 10,
		"BLAKE2B_512": 11,
		"BLAKE3":      12,
		"MD2":         13,
		"ADLER32":     14,
		"MD4":         15,
		"MD6":         16,
		"SHA224":      17,
	}
)

func (x HashAlgorithm) Enum() *HashAlgorithm {
	p := new(HashAlgorithm)
	*p = x
	return p
}

func (x HashAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_sbom_proto_enumTypes[0].Descriptor()
}

func (HashAlgorithm) Type() protoreflect.EnumType {
	return &file_sbom_proto_enumTypes[0]
}

func (x HashAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashAlgorithm.Descriptor instead.
func (HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{0}
}

// Purpose represents different purposes or roles assigned to software entities within the Software Bill of Materials (SBOM).
// It categorizes the roles that software components can fulfill.
type Purpose int32

const (
	// Unknown purpose.
	Purpose_UNKNOWN_PURPOSE Purpose = 0
	// Application purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_APPLICATION Purpose = 1
	// Archive purpose. (SPDX2.3, SPDX3.0)
	Purpose_ARCHIVE Purpose = 2
	// BOM purpose. (SPDX3.0)
	Purpose_BOM Purpose = 3
	// Configuration purpose. (SPDX3.0)
	Purpose_CONFIGURATION Purpose = 4
	// Container purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_CONTAINER Purpose = 5
	// Data purpose. (CDX1.5, SPDX3.0)
	Purpose_DATA Purpose = 6
	// Device purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_DEVICE Purpose = 7
	// Device Driver purpose. (CDX1.5, SPDX3.0)
	Purpose_DEVICE_DRIVER Purpose = 8
	// Documentation purpose. (SPDX3.0)
	Purpose_DOCUMENTATION Purpose = 9
	// Evidence purpose. (SPDX3.0)
	Purpose_EVIDENCE Purpose = 10
	// Executable purpose. (SPDX3.0)
	Purpose_EXECUTABLE Purpose = 11
	// File purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_FILE Purpose = 12
	// Firmware purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_FIRMWARE Purpose = 13
	// Framework purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_FRAMEWORK Purpose = 14
	// Install purpose. (SPDX2.3, SPDX3.0)
	Purpose_INSTALL Purpose = 15
	// Library purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_LIBRARY Purpose = 16
	// Machine Learning Model purpose. (CDX1.5)
	Purpose_MACHINE_LEARNING_MODEL Purpose = 17
	// Manifest purpose. (SPDX3.0)
	Purpose_MANIFEST Purpose = 18
	// Model purpose. (SPDX3.0)
	Purpose_MODEL Purpose = 19
	// Module purpose. (SPDX3.0)
	Purpose_MODULE Purpose = 20
	// Operating System purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_OPERATING_SYSTEM Purpose = 21
	// Other purpose. (SPDX2.3, SPDX3.0)
	Purpose_OTHER Purpose = 22
	// Patch purpose. (SPDX3.0)
	Purpose_PATCH Purpose = 23
	// Platform purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_PLATFORM Purpose = 24
	// Requirement purpose. (SPDX3.0)
	Purpose_REQUIREMENT Purpose = 25
	// Source purpose. (SPDX2.3, SPDX3.0)
	Purpose_SOURCE Purpose = 26
	// Specification purpose. (SPDX3.0)
	Purpose_SPECIFICATION Purpose = 27
	// Test purpose. (SPDX3.0)
	Purpose_TEST Purpose = 28
)

// Enum value maps for Purpose.
var (
	Purpose_name = map[int32]string{
		0:  "UNKNOWN_PURPOSE",
		1:  "APPLICATION",
		2:  "ARCHIVE",
		3:  "BOM",
		4:  "CONFIGURATION",
		5:  "CONTAINER",
		6:  "DATA",
		7:  "DEVICE",
		8:  "DEVICE_DRIVER",
		9:  "DOCUMENTATION",
		10: "EVIDENCE",
		11: "EXECUTABLE",
		12: "FILE",
		13: "FIRMWARE",
		14: "FRAMEWORK",
		15: "INSTALL",
		16: "LIBRARY",
		17: "MACHINE_LEARNING_MODEL",
		18: "MANIFEST",
		19: "MODEL",
		20: "MODULE",
		21: "OPERATING_SYSTEM",
		22: "OTHER",
		23: "PATCH",
		24: "PLATFORM",
		25: "REQUIREMENT",
		26: "SOURCE",
		27: "SPECIFICATION",
		28: "TEST",
	}
	Purpose_value = map[string]int32{
		"UNKNOWN_PURPOSE":        0,
		"APPLICATION":            1,
		"ARCHIVE":                2,
		"BOM":                    3,
		"CONFIGURATION":          4,
		"CONTAINER":              5,
		"DATA":                   6,
		"DEVICE":                 7,
		"DEVICE_DRIVER":          8,
		"DOCUMENTATION":          9,
		"EVIDENCE":               10,
		"EXECUTABLE":             11,
		"FILE":                   12,
		"FIRMWARE":               13,
		"FRAMEWORK":              14,
		"INSTALL":                15,
		"LIBRARY":                16,
		"MACHINE_LEARNING_MODEL": 17,
		"MANIFEST":               18,
		"MODEL":                  19,
		"MODULE":                 20,
		"OPERATING_SYSTEM":       21,
		"OTHER":                  22,
		"PATCH":                  23,
		"PLATFORM":               24,
		"REQUIREMENT":            25,
		"SOURCE":                 26,
		"SPECIFICATION":          27,
		"TEST":                   28,
	}
)

func (x Purpose) Enum() *Purpose {
	p := new(Purpose)
	*p = x
	return p
}

func (x Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_sbom_proto_enumTypes[1].Descriptor()
}

func (Purpose) Type() protoreflect.EnumType {
	return &file_sbom_proto_enumTypes[1]
}

func (x Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Purpose.Descriptor instead.
func (Purpose) EnumDescriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{1}
}

// SoftwareIdentifierType represents different types of identifiers used
// for software entities within the Software Bill of Materials (SBOM).
type SoftwareIdentifierType int32

const (
	// Unknown software identifier type.
	SoftwareIdentifierType_UNKNOWN_IDENTIFIER_TYPE SoftwareIdentifierType = 0
	// Package URL (PURL) identifier type.
	SoftwareIdentifierType_PURL SoftwareIdentifierType = 1
	// Common Platform Enumeration (CPE) version 2.2 identifier type.
	SoftwareIdentifierType_CPE22 SoftwareIdentifierType = 2
	// Common Platform Enumeration (CPE) version 2.3 identifier type.
	SoftwareIdentifierType_CPE23 SoftwareIdentifierType = 3
	// Git Object Identifier (OID) identifier type.
	SoftwareIdentifierType_GITOID SoftwareIdentifierType = 4
)

// Enum value maps for SoftwareIdentifierType.
var (
	SoftwareIdentifierType_name = map[int32]string{
		0: "UNKNOWN_IDENTIFIER_TYPE",
		1: "PURL",
		2: "CPE22",
		3: "CPE23",
		4: "GITOID",
	}
	SoftwareIdentifierType_value = map[string]int32{
		"UNKNOWN_IDENTIFIER_TYPE": 0,
		"PURL":                    1,
		"CPE22":                   2,
		"CPE23":                   3,
		"GITOID":                  4,
	}
)

func (x SoftwareIdentifierType) Enum() *SoftwareIdentifierType {
	p := new(SoftwareIdentifierType)
	*p = x
	return p
}

func (x SoftwareIdentifierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoftwareIdentifierType) Descriptor() protoreflect.EnumDescriptor {
	return file_sbom_proto_enumTypes[2].Descriptor()
}

func (SoftwareIdentifierType) Type() protoreflect.EnumType {
	return &file_sbom_proto_enumTypes[2]
}

func (x SoftwareIdentifierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoftwareIdentifierType.Descriptor instead.
func (SoftwareIdentifierType) EnumDescriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{2}
}

// Enumeration of SBOM document types.
type DocumentType_SBOMType int32

const (
	// Other document type.
	DocumentType_OTHER DocumentType_SBOMType = 0
	// Design document type. (CDX: design)
	DocumentType_DESIGN DocumentType_SBOMType = 1
	// Source document type. (CDX: pre-build)
	DocumentType_SOURCE DocumentType_SBOMType = 2
	// Build document type. (CDX: build)
	DocumentType_BUILD DocumentType_SBOMType = 3
	// Analyzed document type. (CDX: post-build)
	DocumentType_ANALYZED DocumentType_SBOMType = 4
	// Deployed document type. (CDX: operations)
	DocumentType_DEPLOYED DocumentType_SBOMType = 5
	// Runtime document type. (CDX: none)
	DocumentType_RUNTIME DocumentType_SBOMType = 6
	// Discovery document type. (CDX Specific)
	DocumentType_DISCOVERY DocumentType_SBOMType = 7
	// Decommission document type. (CDX Specific)
	DocumentType_DECOMISSION DocumentType_SBOMType = 8
)

// Enum value maps for DocumentType_SBOMType.
var (
	DocumentType_SBOMType_name = map[int32]string{
		0: "OTHER",
		1: "DESIGN",
		2: "SOURCE",
		3: "BUILD",
		4: "ANALYZED",
		5: "DEPLOYED",
		6: "RUNTIME",
		7: "DISCOVERY",
		8: "DECOMISSION",
	}
	DocumentType_SBOMType_value = map[string]int32{
		"OTHER":       0,
		"DESIGN":      1,
		"SOURCE":      2,
		"BUILD":       3,
		"ANALYZED":    4,
		"DEPLOYED":    5,
		"RUNTIME":     6,
		"DISCOVERY":   7,
		"DECOMISSION": 8,
	}
)

func (x DocumentType_SBOMType) Enum() *DocumentType_SBOMType {
	p := new(DocumentType_SBOMType)
	*p = x
	return p
}

func (x DocumentType_SBOMType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentType_SBOMType) Descriptor() protoreflect.EnumDescriptor {
	return file_sbom_proto_enumTypes[3].Descriptor()
}

func (DocumentType_SBOMType) Type() protoreflect.EnumType {
	return &file_sbom_proto_enumTypes[3]
}

func (x DocumentType_SBOMType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentType_SBOMType.Descriptor instead.
func (DocumentType_SBOMType) EnumDescriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{1, 0}
}

// buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
// Type representing the node relationship.
type Edge_Type int32

const (
	// Unknown type.
	Edge_UNKNOWN Edge_Type = 0
	// Amends relationship type.
	Edge_amends Edge_Type = 1
	// Ancestor relationship type.
	Edge_ancestor Edge_Type = 2
	// Build dependency relationship type.
	Edge_buildDependency Edge_Type = 3
	// Build tool relationship type.
	Edge_buildTool Edge_Type = 4
	// Contains relationship type.
	Edge_contains Edge_Type = 5
	// Contained by relationship type. In SPDX 3.x, this field is not supported.
	Edge_contained_by Edge_Type = 6
	// Copy relationship type.
	Edge_copy Edge_Type = 7
	// Data file relationship type.
	Edge_dataFile Edge_Type = 8
	// Dependency manifest relationship type.
	Edge_dependencyManifest Edge_Type = 9
	// Depends on relationship type.
	Edge_dependsOn Edge_Type = 10
	// Dependency of relationship type. In SPDX 3.x, this field is not supported.
	Edge_dependencyOf Edge_Type = 11
	// Descendant relationship type.
	Edge_descendant Edge_Type = 12
	// Describes relationship type.
	Edge_describes Edge_Type = 13
	// Described by relationship type. In SPDX 3.x, this field is not supported.
	Edge_describedBy Edge_Type = 14
	// Development dependency relationship type.
	Edge_devDependency Edge_Type = 15
	// Development tool relationship type.
	Edge_devTool Edge_Type = 16
	// Distribution artifact relationship type.
	Edge_distributionArtifact Edge_Type = 17
	// Documentation relationship type.
	Edge_documentation Edge_Type = 18
	// Dynamic link relationship type.
	Edge_dynamicLink Edge_Type = 19
	// Example relationship type.
	Edge_example Edge_Type = 20
	// Expanded from archive relationship type.
	Edge_expandedFromArchive Edge_Type = 21
	// File added relationship type.
	Edge_fileAdded Edge_Type = 22
	// File deleted relationship type.
	Edge_fileDeleted Edge_Type = 23
	// File modified relationship type.
	Edge_fileModified Edge_Type = 24
	// Generates relationship type.
	Edge_generates Edge_Type = 25
	// Generated from relationship type. In SPDX 3.x, this field is not supported.
	Edge_generatedFrom Edge_Type = 26
	// Metafile relationship type.
	Edge_metafile Edge_Type = 27
	// Optional component relationship type.
	Edge_optionalComponent Edge_Type = 28
	// Optional dependency relationship type.
	Edge_optionalDependency Edge_Type = 29
	// Other relationship type.
	Edge_other Edge_Type = 30
	// Packages relationship type.
	Edge_packages Edge_Type = 31
	// Patch relationship type.
	Edge_patch Edge_Type = 32
	// Prerequisite relationship type.
	Edge_prerequisite Edge_Type = 33
	// Prerequisite for relationship type. In SPDX 3.x, this field is not supported.
	Edge_prerequisiteFor Edge_Type = 34
	// Provided dependency relationship type.
	Edge_providedDependency Edge_Type = 35
	// Requirement for relationship type.
	Edge_requirementFor Edge_Type = 36
	// Runtime dependency relationship type.
	Edge_runtimeDependency Edge_Type = 37
	// Specification for relationship type.
	Edge_specificationFor Edge_Type = 38
	// Static link relationship type.
	Edge_staticLink Edge_Type = 39
	// Test relationship type.
	Edge_test Edge_Type = 40
	// Test case relationship type.
	Edge_testCase Edge_Type = 41
	// Test dependency relationship type.
	Edge_testDependency Edge_Type = 42
	// Test tool relationship type.
	Edge_testTool Edge_Type = 43
	// Variant relationship type.
	Edge_variant Edge_Type = 44
)

// Enum value maps for Edge_Type.
var (
	Edge_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "amends",
		2:  "ancestor",
		3:  "buildDependency",
		4:  "buildTool",
		5:  "contains",
		6:  "contained_by",
		7:  "copy",
		8:  "dataFile",
		9:  "dependencyManifest",
		10: "dependsOn",
		11: "dependencyOf",
		12: "descendant",
		13: "describes",
		14: "describedBy",
		15: "devDependency",
		16: "devTool",
		17: "distributionArtifact",
		18: "documentation",
		19: "dynamicLink",
		20: "example",
		21: "expandedFromArchive",
		22: "fileAdded",
		23: "fileDeleted",
		24: "fileModified",
		25: "generates",
		26: "generatedFrom",
		27: "metafile",
		28: "optionalComponent",
		29: "optionalDependency",
		30: "other",
		31: "packages",
		32: "patch",
		33: "prerequisite",
		34: "prerequisiteFor",
		35: "providedDependency",
		36: "requirementFor",
		37: "runtimeDependency",
		38: "specificationFor",
		39: "staticLink",
		40: "test",
		41: "testCase",
		42: "testDependency",
		43: "testTool",
		44: "variant",
	}
	Edge_Type_value = map[string]int32{
		"UNKNOWN":              0,
		"amends":               1,
		"ancestor":             2,
		"buildDependency":      3,
		"buildTool":            4,
		"contains":             5,
		"contained_by":         6,
		"copy":                 7,
		"dataFile":             8,
		"dependencyManifest":   9,
		"dependsOn":            10,
		"dependencyOf":         11,
		"descendant":           12,
		"describes":            13,
		"describedBy":          14,
		"devDependency":        15,
		"devTool":              16,
		"distributionArtifact": 17,
		"documentation":        18,
		"dynamicLink":          19,
		"example":              20,
		"expandedFromArchive":  21,
		"fileAdded":            22,
		"fileDeleted":          23,
		"fileModified":         24,
		"generates":            25,
		"generatedFrom":        26,
		"metafile":             27,
		"optionalComponent":    28,
		"optionalDependency":   29,
		"other":                30,
		"packages":             31,
		"patch":                32,
		"prerequisite":         33,
		"prerequisiteFor":      34,
		"providedDependency":   35,
		"requirementFor":       36,
		"runtimeDependency":    37,
		"specificationFor":     38,
		"staticLink":           39,
		"test":                 40,
		"testCase":             41,
		"testDependency":       42,
		"testTool":             43,
		"variant":              44,
	}
)

func (x Edge_Type) Enum() *Edge_Type {
	p := new(Edge_Type)
	*p = x
	return p
}

func (x Edge_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Edge_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sbom_proto_enumTypes[4].Descriptor()
}

func (Edge_Type) Type() protoreflect.EnumType {
	return &file_sbom_proto_enumTypes[4]
}

func (x Edge_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Edge_Type.Descriptor instead.
func (Edge_Type) EnumDescriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{2, 0}
}

// Type enumerator representing of the external reference.
type ExternalReference_ExternalReferenceType int32

const (
	// Unknown type.
	ExternalReference_UNKNOWN ExternalReference_ExternalReferenceType = 0
	// Attestation type.
	ExternalReference_ATTESTATION ExternalReference_ExternalReferenceType = 1
	// Binary type.
	ExternalReference_BINARY ExternalReference_ExternalReferenceType = 2
	// BOM type.
	ExternalReference_BOM ExternalReference_ExternalReferenceType = 3
	// Bower type.
	ExternalReference_BOWER ExternalReference_ExternalReferenceType = 4
	// Build meta type.
	ExternalReference_BUILD_META ExternalReference_ExternalReferenceType = 5
	// Build system type.
	ExternalReference_BUILD_SYSTEM ExternalReference_ExternalReferenceType = 6
	// Certification report type.
	ExternalReference_CERTIFICATION_REPORT ExternalReference_ExternalReferenceType = 7
	// Chat type.
	ExternalReference_CHAT ExternalReference_ExternalReferenceType = 8
	// Codified infrastructure type.
	ExternalReference_CODIFIED_INFRASTRUCTURE ExternalReference_ExternalReferenceType = 9
	// Component analysis report type.
	ExternalReference_COMPONENT_ANALYSIS_REPORT ExternalReference_ExternalReferenceType = 10
	// Configuration type.
	ExternalReference_CONFIGURATION ExternalReference_ExternalReferenceType = 11
	// Distribution intake type.
	ExternalReference_DISTRIBUTION_INTAKE ExternalReference_ExternalReferenceType = 12
	// Documentation type.
	ExternalReference_DOCUMENTATION ExternalReference_ExternalReferenceType = 13
	// Download type.
	ExternalReference_DOWNLOAD ExternalReference_ExternalReferenceType = 14
	// Dynamic analysis report type.
	ExternalReference_DYNAMIC_ANALYSIS_REPORT ExternalReference_ExternalReferenceType = 15
	// End-of-life notice type.
	ExternalReference_EOL_NOTICE ExternalReference_ExternalReferenceType = 16
	// Evidence type.
	ExternalReference_EVIDENCE ExternalReference_ExternalReferenceType = 17
	// Export control assessment type.
	ExternalReference_EXPORT_CONTROL_ASSESSMENT ExternalReference_ExternalReferenceType = 18
	// Formulation type.
	ExternalReference_FORMULATION ExternalReference_ExternalReferenceType = 19
	// Funding type.
	ExternalReference_FUNDING ExternalReference_ExternalReferenceType = 20
	// Issue tracker type.
	ExternalReference_ISSUE_TRACKER ExternalReference_ExternalReferenceType = 21
	// License type.
	ExternalReference_LICENSE ExternalReference_ExternalReferenceType = 22
	// Log type.
	ExternalReference_LOG ExternalReference_ExternalReferenceType = 23
	// Mailing list type.
	ExternalReference_MAILING_LIST ExternalReference_ExternalReferenceType = 24
	// Maturity report type.
	ExternalReference_MATURITY_REPORT ExternalReference_ExternalReferenceType = 25
	// Maven Central type.
	ExternalReference_MAVEN_CENTRAL ExternalReference_ExternalReferenceType = 26
	// Metrics type.
	ExternalReference_METRICS ExternalReference_ExternalReferenceType = 27
	// Model card type.
	ExternalReference_MODEL_CARD ExternalReference_ExternalReferenceType = 28
	// NPM type.
	ExternalReference_NPM ExternalReference_ExternalReferenceType = 29
	// NuGet type.
	ExternalReference_NUGET ExternalReference_ExternalReferenceType = 30
	// Other type.
	ExternalReference_OTHER ExternalReference_ExternalReferenceType = 31
	// POAM type.
	ExternalReference_POAM ExternalReference_ExternalReferenceType = 32
	// Privacy assessment type.
	ExternalReference_PRIVACY_ASSESSMENT ExternalReference_ExternalReferenceType = 33
	// Product metadata type.
	ExternalReference_PRODUCT_METADATA ExternalReference_ExternalReferenceType = 34
	// Purchase order type.
	ExternalReference_PURCHASE_ORDER ExternalReference_ExternalReferenceType = 35
	// Quality assessment report type.
	ExternalReference_QUALITY_ASSESSMENT_REPORT ExternalReference_ExternalReferenceType = 36
	// Quality metrics type.
	ExternalReference_QUALITY_METRICS ExternalReference_ExternalReferenceType = 37
	// Release history type.
	ExternalReference_RELEASE_HISTORY ExternalReference_ExternalReferenceType = 38
	// Release notes type.
	ExternalReference_RELEASE_NOTES ExternalReference_ExternalReferenceType = 39
	// Risk assessment type.
	ExternalReference_RISK_ASSESSMENT ExternalReference_ExternalReferenceType = 40
	// Runtime analysis report type.
	ExternalReference_RUNTIME_ANALYSIS_REPORT ExternalReference_ExternalReferenceType = 41
	// Secure software attestation type.
	ExternalReference_SECURE_SOFTWARE_ATTESTATION ExternalReference_ExternalReferenceType = 42
	// Security adversary model type.
	ExternalReference_SECURITY_ADVERSARY_MODEL ExternalReference_ExternalReferenceType = 43
	// Security advisory type.
	ExternalReference_SECURITY_ADVISORY ExternalReference_ExternalReferenceType = 44
	// Security contact type.
	ExternalReference_SECURITY_CONTACT ExternalReference_ExternalReferenceType = 45
	// Security fix type.
	ExternalReference_SECURITY_FIX ExternalReference_ExternalReferenceType = 46
	// Security other type.
	ExternalReference_SECURITY_OTHER ExternalReference_ExternalReferenceType = 47
	// Security pentest report type.
	ExternalReference_SECURITY_PENTEST_REPORT ExternalReference_ExternalReferenceType = 48
	// Security policy type.
	ExternalReference_SECURITY_POLICY ExternalReference_ExternalReferenceType = 49
	// Security SWID type.
	ExternalReference_SECURITY_SWID ExternalReference_ExternalReferenceType = 50
	// Security threat model type.
	ExternalReference_SECURITY_THREAT_MODEL ExternalReference_ExternalReferenceType = 51
	// Social type.
	ExternalReference_SOCIAL ExternalReference_ExternalReferenceType = 52
	// Source artifact type.
	ExternalReference_SOURCE_ARTIFACT ExternalReference_ExternalReferenceType = 53
	// Static analysis report type.
	ExternalReference_STATIC_ANALYSIS_REPORT ExternalReference_ExternalReferenceType = 54
	// Support type.
	ExternalReference_SUPPORT ExternalReference_ExternalReferenceType = 55
	// VCS type.
	ExternalReference_VCS ExternalReference_ExternalReferenceType = 56
	// Vulnerability assertion type.
	ExternalReference_VULNERABILITY_ASSERTION ExternalReference_ExternalReferenceType = 57
	// Vulnerability disclosure report type.
	ExternalReference_VULNERABILITY_DISCLOSURE_REPORT ExternalReference_ExternalReferenceType = 58
	// Vulnerability exploitability assessment type.
	ExternalReference_VULNERABILITY_EXPLOITABILITY_ASSESSMENT ExternalReference_ExternalReferenceType = 59
	// Website type.
	ExternalReference_WEBSITE ExternalReference_ExternalReferenceType = 60
)

// Enum value maps for ExternalReference_ExternalReferenceType.
var (
	ExternalReference_ExternalReferenceType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "ATTESTATION",
		2:  "BINARY",
		3:  "BOM",
		4:  "BOWER",
		5:  "BUILD_META",
		6:  "BUILD_SYSTEM",
		7:  "CERTIFICATION_REPORT",
		8:  "CHAT",
		9:  "CODIFIED_INFRASTRUCTURE",
		10: "COMPONENT_ANALYSIS_REPORT",
		11: "CONFIGURATION",
		12: "DISTRIBUTION_INTAKE",
		13: "DOCUMENTATION",
		14: "DOWNLOAD",
		15: "DYNAMIC_ANALYSIS_REPORT",
		16: "EOL_NOTICE",
		17: "EVIDENCE",
		18: "EXPORT_CONTROL_ASSESSMENT",
		19: "FORMULATION",
		20: "FUNDING",
		21: "ISSUE_TRACKER",
		22: "LICENSE",
		23: "LOG",
		24: "MAILING_LIST",
		25: "MATURITY_REPORT",
		26: "MAVEN_CENTRAL",
		27: "METRICS",
		28: "MODEL_CARD",
		29: "NPM",
		30: "NUGET",
		31: "OTHER",
		32: "POAM",
		33: "PRIVACY_ASSESSMENT",
		34: "PRODUCT_METADATA",
		35: "PURCHASE_ORDER",
		36: "QUALITY_ASSESSMENT_REPORT",
		37: "QUALITY_METRICS",
		38: "RELEASE_HISTORY",
		39: "RELEASE_NOTES",
		40: "RISK_ASSESSMENT",
		41: "RUNTIME_ANALYSIS_REPORT",
		42: "SECURE_SOFTWARE_ATTESTATION",
		43: "SECURITY_ADVERSARY_MODEL",
		44: "SECURITY_ADVISORY",
		45: "SECURITY_CONTACT",
		46: "SECURITY_FIX",
		47: "SECURITY_OTHER",
		48: "SECURITY_PENTEST_REPORT",
		49: "SECURITY_POLICY",
		50: "SECURITY_SWID",
		51: "SECURITY_THREAT_MODEL",
		52: "SOCIAL",
		53: "SOURCE_ARTIFACT",
		54: "STATIC_ANALYSIS_REPORT",
		55: "SUPPORT",
		56: "VCS",
		57: "VULNERABILITY_ASSERTION",
		58: "VULNERABILITY_DISCLOSURE_REPORT",
		59: "VULNERABILITY_EXPLOITABILITY_ASSESSMENT",
		60: "WEBSITE",
	}
	ExternalReference_ExternalReferenceType_value = map[string]int32{
		"UNKNOWN":                         0,
		"ATTESTATION":                     1,
		"BINARY":                          2,
		"BOM":                             3,
		"BOWER":                           4,
		"BUILD_META":                      5,
		"BUILD_SYSTEM":                    6,
		"CERTIFICATION_REPORT":            7,
		"CHAT":                            8,
		"CODIFIED_INFRASTRUCTURE":         9,
		"COMPONENT_ANALYSIS_REPORT":       10,
		"CONFIGURATION":                   11,
		"DISTRIBUTION_INTAKE":             12,
		"DOCUMENTATION":                   13,
		"DOWNLOAD":                        14,
		"DYNAMIC_ANALYSIS_REPORT":         15,
		"EOL_NOTICE":                      16,
		"EVIDENCE":                        17,
		"EXPORT_CONTROL_ASSESSMENT":       18,
		"FORMULATION":                     19,
		"FUNDING":                         20,
		"ISSUE_TRACKER":                   21,
		"LICENSE":                         22,
		"LOG":                             23,
		"MAILING_LIST":                    24,
		"MATURITY_REPORT":                 25,
		"MAVEN_CENTRAL":                   26,
		"METRICS":                         27,
		"MODEL_CARD":                      28,
		"NPM":                             29,
		"NUGET":                           30,
		"OTHER":                           31,
		"POAM":                            32,
		"PRIVACY_ASSESSMENT":              33,
		"PRODUCT_METADATA":                34,
		"PURCHASE_ORDER":                  35,
		"QUALITY_ASSESSMENT_REPORT":       36,
		"QUALITY_METRICS":                 37,
		"RELEASE_HISTORY":                 38,
		"RELEASE_NOTES":                   39,
		"RISK_ASSESSMENT":                 40,
		"RUNTIME_ANALYSIS_REPORT":         41,
		"SECURE_SOFTWARE_ATTESTATION":     42,
		"SECURITY_ADVERSARY_MODEL":        43,
		"SECURITY_ADVISORY":               44,
		"SECURITY_CONTACT":                45,
		"SECURITY_FIX":                    46,
		"SECURITY_OTHER":                  47,
		"SECURITY_PENTEST_REPORT":         48,
		"SECURITY_POLICY":                 49,
		"SECURITY_SWID":                   50,
		"SECURITY_THREAT_MODEL":           51,
		"SOCIAL":                          52,
		"SOURCE_ARTIFACT":                 53,
		"STATIC_ANALYSIS_REPORT":          54,
		"SUPPORT":                         55,
		"VCS":                             56,
		"VULNERABILITY_ASSERTION":         57,
		"VULNERABILITY_DISCLOSURE_REPORT": 58,
		"VULNERABILITY_EXPLOITABILITY_ASSESSMENT": 59,
		"WEBSITE": 60,
	}
)

func (x ExternalReference_ExternalReferenceType) Enum() *ExternalReference_ExternalReferenceType {
	p := new(ExternalReference_ExternalReferenceType)
	*p = x
	return p
}

func (x ExternalReference_ExternalReferenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalReference_ExternalReferenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_sbom_proto_enumTypes[5].Descriptor()
}

func (ExternalReference_ExternalReferenceType) Type() protoreflect.EnumType {
	return &file_sbom_proto_enumTypes[5]
}

func (x ExternalReference_ExternalReferenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalReference_ExternalReferenceType.Descriptor instead.
func (ExternalReference_ExternalReferenceType) EnumDescriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{3, 0}
}

// Type of the software component.
type Node_NodeType int32

const (
	// Software component type is a package.
	Node_PACKAGE Node_NodeType = 0
	// Software component type is a file.
	Node_FILE Node_NodeType = 1
)

// Enum value maps for Node_NodeType.
var (
	Node_NodeType_name = map[int32]string{
		0: "PACKAGE",
		1: "FILE",
	}
	Node_NodeType_value = map[string]int32{
		"PACKAGE": 0,
		"FILE":    1,
	}
)

func (x Node_NodeType) Enum() *Node_NodeType {
	p := new(Node_NodeType)
	*p = x
	return p
}

func (x Node_NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_sbom_proto_enumTypes[6].Descriptor()
}

func (Node_NodeType) Type() protoreflect.EnumType {
	return &file_sbom_proto_enumTypes[6]
}

func (x Node_NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_NodeType.Descriptor instead.
func (Node_NodeType) EnumDescriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{5, 0}
}

// Document is the top-level structure representing the entire Software Bill of Materials (SBOM).
// It serves as the core neutral ground for the SBOM translation process, encapsulating metadata,
// components (nodes), and the graph structure (edges).
type Document struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata associated with the SBOM document
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// List of nodes and edges forming the SBOM graph
	NodeList      *NodeList `protobuf:"bytes,2,opt,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Document) Reset() {
	*x = Document{}
	mi := &file_sbom_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_sbom_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{0}
}

func (x *Document) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Document) GetNodeList() *NodeList {
	if x != nil {
		return x.NodeList
	}
	return nil
}

// DocumentType represents the type of document in the Software Bill of Materials (SBOM) ecosystem.
// It categorizes the SBOM document based on its purpose or stage in the software development lifecycle.
type DocumentType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SBOM document type.
	Type *DocumentType_SBOMType `protobuf:"varint,1,opt,name=type,proto3,enum=protobom.protobom.DocumentType_SBOMType,oneof" json:"type,omitempty"`
	// Name associated with the document type.
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Description of the document type.
	Description   *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DocumentType) Reset() {
	*x = DocumentType{}
	mi := &file_sbom_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentType) ProtoMessage() {}

func (x *DocumentType) ProtoReflect() protoreflect.Message {
	mi := &file_sbom_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentType.ProtoReflect.Descriptor instead.
func (*DocumentType) Descriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{1}
}

func (x *DocumentType) GetType() DocumentType_SBOMType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DocumentType_OTHER
}

func (x *DocumentType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DocumentType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// Edge represents relationships between nodes in the Software Bill of Materials (SBOM) graph.
// Each Edge captures the type of relationship and the nodes involved, providing a structured
// way to model dependencies and connections within the SBOM.
type Edge struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type enumerator representing the node relationship.
	Type Edge_Type `protobuf:"varint,1,opt,name=type,proto3,enum=protobom.protobom.Edge_Type" json:"type,omitempty"`
	// Source node of the edge.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Target nodes of the edge.
	To            []string `protobuf:"bytes,3,rep,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Edge) Reset() {
	*x = Edge{}
	mi := &file_sbom_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_sbom_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{2}
}

func (x *Edge) GetType() Edge_Type {
	if x != nil {
		return x.Type
	}
	return Edge_UNKNOWN
}

func (x *Edge) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Edge) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

// ExternalReference is an entry linking an element to a resource defined outside the SBOM standard.
type ExternalReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL providing reference to an external resource.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Comments associated with the external reference.
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// Authority responsible for the external reference.
	Authority string `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
	// Hashes associated with the external reference.
	Hashes map[int32]string `protobuf:"bytes,6,rep,name=hashes,proto3" json:"hashes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Type of the external reference, Replaced field 2.
	Type          ExternalReference_ExternalReferenceType `protobuf:"varint,7,opt,name=type,proto3,enum=protobom.protobom.ExternalReference_ExternalReferenceType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalReference) Reset() {
	*x = ExternalReference{}
	mi := &file_sbom_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalReference) ProtoMessage() {}

func (x *ExternalReference) ProtoReflect() protoreflect.Message {
	mi := &file_sbom_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalReference.ProtoReflect.Descriptor instead.
func (*ExternalReference) Descriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{3}
}

func (x *ExternalReference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ExternalReference) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ExternalReference) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *ExternalReference) GetHashes() map[int32]string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *ExternalReference) GetType() ExternalReference_ExternalReferenceType {
	if x != nil {
		return x.Type
	}
	return ExternalReference_UNKNOWN
}

// Metadata encapsulates document-related details about the Software Bill of Materials (SBOM) document.
// It includes information such as the document's identifier, version, authorship, creation date,
// associated tools, and document types.
type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the document. Serial number in CycloneDX foramts, SPDXID in spdx formats.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version of the document. In Cyclone formats the version is translated from `Int` field in to a more general `String` field.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Name associated with the document.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Created date of the Document. In SPDX formats mapped to the created date field.
	Date *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// Tools used in the creation or processing of the document.
	Tools []*Tool `protobuf:"bytes,5,rep,name=tools,proto3" json:"tools,omitempty"`
	// Individuals or organizations involved in the creation or maintenance of the document.
	Authors []*Person `protobuf:"bytes,6,rep,name=authors,proto3" json:"authors,omitempty"`
	// Comments on the document.
	Comment string `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	// buf:lint:ignore FIELD_LOWER_SNAKE_CASE
	// Types categorizing the document based on its purpose or stage in the software development lifecycle.
	DocumentTypes []*DocumentType `protobuf:"bytes,8,rep,name=documentTypes,proto3" json:"documentTypes,omitempty"`
	// Field for preserving original format information and additional metadata
	SourceData    *SourceData `protobuf:"bytes,9,opt,name=source_data,json=sourceData,proto3" json:"source_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_sbom_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_sbom_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{4}
}

func (x *Metadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Metadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Metadata) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *Metadata) GetAuthors() []*Person {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *Metadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Metadata) GetDocumentTypes() []*DocumentType {
	if x != nil {
		return x.DocumentTypes
	}
	return nil
}

func (x *Metadata) GetSourceData() *SourceData {
	if x != nil {
		return x.SourceData
	}
	return nil
}

// Node represents a central element within the Software Bill of Materials (SBOM) graph,
// serving as a vertex that captures vital information about a software component.
// Each Node in the SBOM graph signifies a distinct software component, forming the vertices of the graph.
type Node struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of the software component.
	Type Node_NodeType `protobuf:"varint,2,opt,name=type,proto3,enum=protobom.protobom.Node_NodeType" json:"type,omitempty"`
	// Name of the software component.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Version string of the software component.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Package filename when there is one.
	FileName string `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// Website of the package.
	UrlHome string `protobuf:"bytes,6,opt,name=url_home,json=urlHome,proto3" json:"url_home,omitempty"`
	// Location to download the package.
	UrlDownload string `protobuf:"bytes,7,opt,name=url_download,json=urlDownload,proto3" json:"url_download,omitempty"`
	// Multiple licenses applicable to the software component,
	// Multiple licenses can be specified for CycloneDX 1.4 and files in SPDX.
	Licenses []string `protobuf:"bytes,8,rep,name=licenses,proto3" json:"licenses,omitempty"`
	// Concluded license applicable to the software component,
	// This is only in SPDX and it is just one.
	LicenseConcluded string `protobuf:"bytes,9,opt,name=license_concluded,json=licenseConcluded,proto3" json:"license_concluded,omitempty"`
	// Comments on the license.
	LicenseComments string `protobuf:"bytes,10,opt,name=license_comments,json=licenseComments,proto3" json:"license_comments,omitempty"`
	// Copyright information applicable to the software component.
	Copyright string `protobuf:"bytes,11,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// This field is intended to capture details related to the source or origin of the software component.
	// It may include any relevant background information or additional comments.
	SourceInfo string `protobuf:"bytes,13,opt,name=source_info,json=sourceInfo,proto3" json:"source_info,omitempty"`
	// Comments on the software component.
	Comment string `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`
	// Concise description of the software component (short description).
	Summary string `protobuf:"bytes,16,opt,name=summary,proto3" json:"summary,omitempty"`
	// Detailed description of the software component (full description).
	Description string `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	// One or more contributions or acknowledgments associated with the software component.
	Attribution []string `protobuf:"bytes,18,rep,name=attribution,proto3" json:"attribution,omitempty"`
	// One or more entities providing the software component.
	Suppliers []*Person `protobuf:"bytes,19,rep,name=suppliers,proto3" json:"suppliers,omitempty"`
	// One or more entities involved in the creation or maintenance of the software component.
	Originators []*Person `protobuf:"bytes,20,rep,name=originators,proto3" json:"originators,omitempty"`
	// Release date of the software component.
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	// Build date of the software component.
	BuildDate *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
	// Valid until date of the software component.
	ValidUntilDate *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=valid_until_date,json=validUntilDate,proto3" json:"valid_until_date,omitempty"`
	// External references associated with the software component.
	ExternalReferences []*ExternalReference `protobuf:"bytes,24,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	// File types associated with the component
	FileTypes []string `protobuf:"bytes,27,rep,name=file_types,json=fileTypes,proto3" json:"file_types,omitempty"`
	// Software identifer map used by the component.
	// Maps between the software identifier types and the identifier values.
	Identifiers map[int32]string `protobuf:"bytes,28,rep,name=identifiers,proto3" json:"identifiers,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Hashes map associated with the software component.
	// Maps between hash algorithms types and hash values.
	Hashes map[int32]string `protobuf:"bytes,29,rep,name=hashes,proto3" json:"hashes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Primary purpose or role assigned to the software component.
	PrimaryPurpose []Purpose `protobuf:"varint,30,rep,packed,name=primary_purpose,json=primaryPurpose,proto3,enum=protobom.protobom.Purpose" json:"primary_purpose,omitempty"`
	// Property collection of the node.
	Properties    []*Property `protobuf:"bytes,31,rep,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_sbom_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_sbom_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{5}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetType() Node_NodeType {
	if x != nil {
		return x.Type
	}
	return Node_PACKAGE
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Node) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Node) GetUrlHome() string {
	if x != nil {
		return x.UrlHome
	}
	return ""
}

func (x *Node) GetUrlDownload() string {
	if x != nil {
		return x.UrlDownload
	}
	return ""
}

func (x *Node) GetLicenses() []string {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *Node) GetLicenseConcluded() string {
	if x != nil {
		return x.LicenseConcluded
	}
	return ""
}

func (x *Node) GetLicenseComments() string {
	if x != nil {
		return x.LicenseComments
	}
	return ""
}

func (x *Node) GetCopyright() string {
	if x != nil {
		return x.Copyright
	}
	return ""
}

func (x *Node) GetSourceInfo() string {
	if x != nil {
		return x.SourceInfo
	}
	return ""
}

func (x *Node) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Node) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetAttribution() []string {
	if x != nil {
		return x.Attribution
	}
	return nil
}

func (x *Node) GetSuppliers() []*Person {
	if x != nil {
		return x.Suppliers
	}
	return nil
}

func (x *Node) GetOriginators() []*Person {
	if x != nil {
		return x.Originators
	}
	return nil
}

func (x *Node) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Node) GetBuildDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildDate
	}
	return nil
}

func (x *Node) GetValidUntilDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidUntilDate
	}
	return nil
}

func (x *Node) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Node) GetFileTypes() []string {
	if x != nil {
		return x.FileTypes
	}
	return nil
}

func (x *Node) GetIdentifiers() map[int32]string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *Node) GetHashes() map[int32]string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *Node) GetPrimaryPurpose() []Purpose {
	if x != nil {
		return x.PrimaryPurpose
	}
	return nil
}

func (x *Node) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

// NodeList represents a collection of nodes and edges forming the Software Bill of Materials (SBOM) graph.
// It encapsulates the fundamental components of the SBOM, including software entities (nodes) and their relationships (edges).
type NodeList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of software components (nodes) in the SBOM graph.
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// List of relationships (edges) between nodes in the SBOM graph.
	Edges []*Edge `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty"`
	// List of root elements in the SBOM graph.
	RootElements  []string `protobuf:"bytes,3,rep,name=root_elements,json=rootElements,proto3" json:"root_elements,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeList) Reset() {
	*x = NodeList{}
	mi := &file_sbom_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeList) ProtoMessage() {}

func (x *NodeList) ProtoReflect() protoreflect.Message {
	mi := &file_sbom_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeList.ProtoReflect.Descriptor instead.
func (*NodeList) Descriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{6}
}

func (x *NodeList) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NodeList) GetEdges() []*Edge {
	if x != nil {
		return x.Edges
	}
	return nil
}

func (x *NodeList) GetRootElements() []string {
	if x != nil {
		return x.RootElements
	}
	return nil
}

// Person represents an individual or organization involved in the creation or maintenance
// of the document or node.
type Person struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the person or organization.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Indicates whether the entity is an organization (true) or an individual (false).
	IsOrg bool `protobuf:"varint,2,opt,name=is_org,json=isOrg,proto3" json:"is_org,omitempty"`
	// Email address of the person or organization.
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// URL associated with the person or organization.
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// Phone number associated with the person or organization.
	Phone string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	// Contacts associated with the person or organization.
	Contacts      []*Person `protobuf:"bytes,6,rep,name=contacts,proto3" json:"contacts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Person) Reset() {
	*x = Person{}
	mi := &file_sbom_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_sbom_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{7}
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetIsOrg() bool {
	if x != nil {
		return x.IsOrg
	}
	return false
}

func (x *Person) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Person) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Person) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Person) GetContacts() []*Person {
	if x != nil {
		return x.Contacts
	}
	return nil
}

// Property type, key-value store of data.
type Property struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the property
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Property value
	Data          string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Property) Reset() {
	*x = Property{}
	mi := &file_sbom_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_sbom_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{8}
}

func (x *Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Property) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// SourceData message encapsulates additional metadata related to the original SBOM document.
type SourceData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The original format string of the SBOM document (e.g., text/spdx+json;version=2.3).
	Format string `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	// The hashes of the original SBOM document to ensure integrity.
	Hashes map[int32]string `protobuf:"bytes,2,rep,name=hashes,proto3" json:"hashes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The original size of the SBOM document in bytes.
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// The original URI of the SBOM document.
	Uri           *string `protobuf:"bytes,4,opt,name=uri,proto3,oneof" json:"uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceData) Reset() {
	*x = SourceData{}
	mi := &file_sbom_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceData) ProtoMessage() {}

func (x *SourceData) ProtoReflect() protoreflect.Message {
	mi := &file_sbom_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceData.ProtoReflect.Descriptor instead.
func (*SourceData) Descriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{9}
}

func (x *SourceData) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SourceData) GetHashes() map[int32]string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *SourceData) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SourceData) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

// Tool represents a software tool used in the creation or processing of the Software Bill of Materials (SBOM) document.
type Tool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the software tool.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the software tool.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Vendor or creator of the software tool.
	Vendor        string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tool) Reset() {
	*x = Tool{}
	mi := &file_sbom_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tool) ProtoMessage() {}

func (x *Tool) ProtoReflect() protoreflect.Message {
	mi := &file_sbom_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tool.ProtoReflect.Descriptor instead.
func (*Tool) Descriptor() ([]byte, []int) {
	return file_sbom_proto_rawDescGZIP(), []int{10}
}

func (x *Tool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tool) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Tool) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

var File_sbom_proto protoreflect.FileDescriptor

const file_sbom_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"sbom.proto\x12\x11protobom.protobom\x1a\x1fgoogle/protobuf/timestamp.proto\"}\n" +
	"\bDocument\x127\n" +
	"\bmetadata\x18\x01 \x01(\v2\x1b.protobom.protobom.MetadataR\bmetadata\x128\n" +
	"\tnode_list\x18\x02 \x01(\v2\x1b.protobom.protobom.NodeListR\bnodeList\"\xb7\x02\n" +
	"\fDocumentType\x12A\n" +
	"\x04type\x18\x01 \x01(\x0e2(.protobom.protobom.DocumentType.SBOMTypeH\x00R\x04type\x88\x01\x01\x12\x17\n" +
	"\x04name\x18\x02 \x01(\tH\x01R\x04name\x88\x01\x01\x12%\n" +
	"\vdescription\x18\x03 \x01(\tH\x02R\vdescription\x88\x01\x01\"\x81\x01\n" +
	"\bSBOMType\x12\t\n" +
	"\x05OTHER\x10\x00\x12\n" +
	"\n" +
	"\x06DESIGN\x10\x01\x12\n" +
	"\n" +
	"\x06SOURCE\x10\x02\x12\t\n" +
	"\x05BUILD\x10\x03\x12\f\n" +
	"\bANALYZED\x10\x04\x12\f\n" +
	"\bDEPLOYED\x10\x05\x12\v\n" +
	"\aRUNTIME\x10\x06\x12\r\n" +
	"\tDISCOVERY\x10\a\x12\x0f\n" +
	"\vDECOMISSION\x10\bB\a\n" +
	"\x05_typeB\a\n" +
	"\x05_nameB\x0e\n" +
	"\f_description\"\xe1\x06\n" +
	"\x04Edge\x120\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1c.protobom.protobom.Edge.TypeR\x04type\x12\x12\n" +
	"\x04from\x18\x02 \x01(\tR\x04from\x12\x0e\n" +
	"\x02to\x18\x03 \x03(\tR\x02to\"\x82\x06\n" +
	"\x04Type\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\n" +
	"\n" +
	"\x06amends\x10\x01\x12\f\n" +
	"\bancestor\x10\x02\x12\x13\n" +
	"\x0fbuildDependency\x10\x03\x12\r\n" +
	"\tbuildTool\x10\x04\x12\f\n" +
	"\bcontains\x10\x05\x12\x10\n" +
	"\fcontained_by\x10\x06\x12\b\n" +
	"\x04copy\x10\a\x12\f\n" +
	"\bdataFile\x10\b\x12\x16\n" +
	"\x12dependencyManifest\x10\t\x12\r\n" +
	"\tdependsOn\x10\n" +
	"\x12\x10\n" +
	"\fdependencyOf\x10\v\x12\x0e\n" +
	"\n" +
	"descendant\x10\f\x12\r\n" +
	"\tdescribes\x10\r\x12\x0f\n" +
	"\vdescribedBy\x10\x0e\x12\x11\n" +
	"\rdevDependency\x10\x0f\x12\v\n" +
	"\adevTool\x10\x10\x12\x18\n" +
	"\x14distributionArtifact\x10\x11\x12\x11\n" +
	"\rdocumentation\x10\x12\x12\x0f\n" +
	"\vdynamicLink\x10\x13\x12\v\n" +
	"\aexample\x10\x14\x12\x17\n" +
	"\x13expandedFromArchive\x10\x15\x12\r\n" +
	"\tfileAdded\x10\x16\x12\x0f\n" +
	"\vfileDeleted\x10\x17\x12\x10\n" +
	"\ffileModified\x10\x18\x12\r\n" +
	"\tgenerates\x10\x19\x12\x11\n" +
	"\rgeneratedFrom\x10\x1a\x12\f\n" +
	"\bmetafile\x10\x1b\x12\x15\n" +
	"\x11optionalComponent\x10\x1c\x12\x16\n" +
	"\x12optionalDependency\x10\x1d\x12\t\n" +
	"\x05other\x10\x1e\x12\f\n" +
	"\bpackages\x10\x1f\x12\t\n" +
	"\x05patch\x10 \x12\x10\n" +
	"\fprerequisite\x10!\x12\x13\n" +
	"\x0fprerequisiteFor\x10\"\x12\x16\n" +
	"\x12providedDependency\x10#\x12\x12\n" +
	"\x0erequirementFor\x10$\x12\x15\n" +
	"\x11runtimeDependency\x10%\x12\x14\n" +
	"\x10specificationFor\x10&\x12\x0e\n" +
	"\n" +
	"staticLink\x10'\x12\b\n" +
	"\x04test\x10(\x12\f\n" +
	"\btestCase\x10)\x12\x12\n" +
	"\x0etestDependency\x10*\x12\f\n" +
	"\btestTool\x10+\x12\v\n" +
	"\avariant\x10,\"\x97\f\n" +
	"\x11ExternalReference\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x18\n" +
	"\acomment\x18\x03 \x01(\tR\acomment\x12\x1c\n" +
	"\tauthority\x18\x04 \x01(\tR\tauthority\x12H\n" +
	"\x06hashes\x18\x06 \x03(\v20.protobom.protobom.ExternalReference.HashesEntryR\x06hashes\x12N\n" +
	"\x04type\x18\a \x01(\x0e2:.protobom.protobom.ExternalReference.ExternalReferenceTypeR\x04type\x1a9\n" +
	"\vHashesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd6\t\n" +
	"\x15ExternalReferenceType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x0f\n" +
	"\vATTESTATION\x10\x01\x12\n" +
	"\n" +
	"\x06BINARY\x10\x02\x12\a\n" +
	"\x03BOM\x10\x03\x12\t\n" +
	"\x05BOWER\x10\x04\x12\x0e\n" +
	"\n" +
	"BUILD_META\x10\x05\x12\x10\n" +
	"\fBUILD_SYSTEM\x10\x06\x12\x18\n" +
	"\x14CERTIFICATION_REPORT\x10\a\x12\b\n" +
	"\x04CHAT\x10\b\x12\x1b\n" +
	"\x17CODIFIED_INFRASTRUCTURE\x10\t\x12\x1d\n" +
	"\x19COMPONENT_ANALYSIS_REPORT\x10\n" +
	"\x12\x11\n" +
	"\rCONFIGURATION\x10\v\x12\x17\n" +
	"\x13DISTRIBUTION_INTAKE\x10\f\x12\x11\n" +
	"\rDOCUMENTATION\x10\r\x12\f\n" +
	"\bDOWNLOAD\x10\x0e\x12\x1b\n" +
	"\x17DYNAMIC_ANALYSIS_REPORT\x10\x0f\x12\x0e\n" +
	"\n" +
	"EOL_NOTICE\x10\x10\x12\f\n" +
	"\bEVIDENCE\x10\x11\x12\x1d\n" +
	"\x19EXPORT_CONTROL_ASSESSMENT\x10\x12\x12\x0f\n" +
	"\vFORMULATION\x10\x13\x12\v\n" +
	"\aFUNDING\x10\x14\x12\x11\n" +
	"\rISSUE_TRACKER\x10\x15\x12\v\n" +
	"\aLICENSE\x10\x16\x12\a\n" +
	"\x03LOG\x10\x17\x12\x10\n" +
	"\fMAILING_LIST\x10\x18\x12\x13\n" +
	"\x0fMATURITY_REPORT\x10\x19\x12\x11\n" +
	"\rMAVEN_CENTRAL\x10\x1a\x12\v\n" +
	"\aMETRICS\x10\x1b\x12\x0e\n" +
	"\n" +
	"MODEL_CARD\x10\x1c\x12\a\n" +
	"\x03NPM\x10\x1d\x12\t\n" +
	"\x05NUGET\x10\x1e\x12\t\n" +
	"\x05OTHER\x10\x1f\x12\b\n" +
	"\x04POAM\x10 \x12\x16\n" +
	"\x12PRIVACY_ASSESSMENT\x10!\x12\x14\n" +
	"\x10PRODUCT_METADATA\x10\"\x12\x12\n" +
	"\x0ePURCHASE_ORDER\x10#\x12\x1d\n" +
	"\x19QUALITY_ASSESSMENT_REPORT\x10$\x12\x13\n" +
	"\x0fQUALITY_METRICS\x10%\x12\x13\n" +
	"\x0fRELEASE_HISTORY\x10&\x12\x11\n" +
	"\rRELEASE_NOTES\x10'\x12\x13\n" +
	"\x0fRISK_ASSESSMENT\x10(\x12\x1b\n" +
	"\x17RUNTIME_ANALYSIS_REPORT\x10)\x12\x1f\n" +
	"\x1bSECURE_SOFTWARE_ATTESTATION\x10*\x12\x1c\n" +
	"\x18SECURITY_ADVERSARY_MODEL\x10+\x12\x15\n" +
	"\x11SECURITY_ADVISORY\x10,\x12\x14\n" +
	"\x10SECURITY_CONTACT\x10-\x12\x10\n" +
	"\fSECURITY_FIX\x10.\x12\x12\n" +
	"\x0eSECURITY_OTHER\x10/\x12\x1b\n" +
	"\x17SECURITY_PENTEST_REPORT\x100\x12\x13\n" +
	"\x0fSECURITY_POLICY\x101\x12\x11\n" +
	"\rSECURITY_SWID\x102\x12\x19\n" +
	"\x15SECURITY_THREAT_MODEL\x103\x12\n" +
	"\n" +
	"\x06SOCIAL\x104\x12\x13\n" +
	"\x0fSOURCE_ARTIFACT\x105\x12\x1a\n" +
	"\x16STATIC_ANALYSIS_REPORT\x106\x12\v\n" +
	"\aSUPPORT\x107\x12\a\n" +
	"\x03VCS\x108\x12\x1b\n" +
	"\x17VULNERABILITY_ASSERTION\x109\x12#\n" +
	"\x1fVULNERABILITY_DISCLOSURE_REPORT\x10:\x12+\n" +
	"'VULNERABILITY_EXPLOITABILITY_ASSESSMENT\x10;\x12\v\n" +
	"\aWEBSITE\x10<J\x04\b\x02\x10\x03J\x04\b\x05\x10\x06\"\xfd\x02\n" +
	"\bMetadata\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12.\n" +
	"\x04date\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x04date\x12-\n" +
	"\x05tools\x18\x05 \x03(\v2\x17.protobom.protobom.ToolR\x05tools\x123\n" +
	"\aauthors\x18\x06 \x03(\v2\x19.protobom.protobom.PersonR\aauthors\x12\x18\n" +
	"\acomment\x18\a \x01(\tR\acomment\x12E\n" +
	"\rdocumentTypes\x18\b \x03(\v2\x1f.protobom.protobom.DocumentTypeR\rdocumentTypes\x12>\n" +
	"\vsource_data\x18\t \x01(\v2\x1d.protobom.protobom.SourceDataR\n" +
	"sourceData\"\xe7\n" +
	"\n" +
	"\x04Node\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x124\n" +
	"\x04type\x18\x02 \x01(\x0e2 .protobom.protobom.Node.NodeTypeR\x04type\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12\x1b\n" +
	"\tfile_name\x18\x05 \x01(\tR\bfileName\x12\x19\n" +
	"\burl_home\x18\x06 \x01(\tR\aurlHome\x12!\n" +
	"\furl_download\x18\a \x01(\tR\vurlDownload\x12\x1a\n" +
	"\blicenses\x18\b \x03(\tR\blicenses\x12+\n" +
	"\x11license_concluded\x18\t \x01(\tR\x10licenseConcluded\x12)\n" +
	"\x10license_comments\x18\n" +
	" \x01(\tR\x0flicenseComments\x12\x1c\n" +
	"\tcopyright\x18\v \x01(\tR\tcopyright\x12\x1f\n" +
	"\vsource_info\x18\r \x01(\tR\n" +
	"sourceInfo\x12\x18\n" +
	"\acomment\x18\x0f \x01(\tR\acomment\x12\x18\n" +
	"\asummary\x18\x10 \x01(\tR\asummary\x12 \n" +
	"\vdescription\x18\x11 \x01(\tR\vdescription\x12 \n" +
	"\vattribution\x18\x12 \x03(\tR\vattribution\x127\n" +
	"\tsuppliers\x18\x13 \x03(\v2\x19.protobom.protobom.PersonR\tsuppliers\x12;\n" +
	"\voriginators\x18\x14 \x03(\v2\x19.protobom.protobom.PersonR\voriginators\x12=\n" +
	"\frelease_date\x18\x15 \x01(\v2\x1a.google.protobuf.TimestampR\vreleaseDate\x129\n" +
	"\n" +
	"build_date\x18\x16 \x01(\v2\x1a.google.protobuf.TimestampR\tbuildDate\x12D\n" +
	"\x10valid_until_date\x18\x17 \x01(\v2\x1a.google.protobuf.TimestampR\x0evalidUntilDate\x12U\n" +
	"\x13external_references\x18\x18 \x03(\v2$.protobom.protobom.ExternalReferenceR\x12externalReferences\x12\x1d\n" +
	"\n" +
	"file_types\x18\x1b \x03(\tR\tfileTypes\x12J\n" +
	"\videntifiers\x18\x1c \x03(\v2(.protobom.protobom.Node.IdentifiersEntryR\videntifiers\x12;\n" +
	"\x06hashes\x18\x1d \x03(\v2#.protobom.protobom.Node.HashesEntryR\x06hashes\x12C\n" +
	"\x0fprimary_purpose\x18\x1e \x03(\x0e2\x1a.protobom.protobom.PurposeR\x0eprimaryPurpose\x12;\n" +
	"\n" +
	"properties\x18\x1f \x03(\v2\x1b.protobom.protobom.PropertyR\n" +
	"properties\x1a>\n" +
	"\x10IdentifiersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a9\n" +
	"\vHashesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"!\n" +
	"\bNodeType\x12\v\n" +
	"\aPACKAGE\x10\x00\x12\b\n" +
	"\x04FILE\x10\x01J\x04\b\f\x10\rJ\x04\b\x0e\x10\x0fJ\x04\b\x19\x10\x1a\"\x8d\x01\n" +
	"\bNodeList\x12-\n" +
	"\x05nodes\x18\x01 \x03(\v2\x17.protobom.protobom.NodeR\x05nodes\x12-\n" +
	"\x05edges\x18\x02 \x03(\v2\x17.protobom.protobom.EdgeR\x05edges\x12#\n" +
	"\rroot_elements\x18\x03 \x03(\tR\frootElements\"\xa8\x01\n" +
	"\x06Person\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x15\n" +
	"\x06is_org\x18\x02 \x01(\bR\x05isOrg\x12\x14\n" +
	"\x05email\x18\x03 \x01(\tR\x05email\x12\x10\n" +
	"\x03url\x18\x04 \x01(\tR\x03url\x12\x14\n" +
	"\x05phone\x18\x05 \x01(\tR\x05phone\x125\n" +
	"\bcontacts\x18\x06 \x03(\v2\x19.protobom.protobom.PersonR\bcontacts\"2\n" +
	"\bProperty\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04data\x18\x02 \x01(\tR\x04data\"\xd5\x01\n" +
	"\n" +
	"SourceData\x12\x16\n" +
	"\x06format\x18\x01 \x01(\tR\x06format\x12A\n" +
	"\x06hashes\x18\x02 \x03(\v2).protobom.protobom.SourceData.HashesEntryR\x06hashes\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\x12\x15\n" +
	"\x03uri\x18\x04 \x01(\tH\x00R\x03uri\x88\x01\x01\x1a9\n" +
	"\vHashesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x06\n" +
	"\x04_uri\"L\n" +
	"\x04Tool\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x16\n" +
	"\x06vendor\x18\x03 \x01(\tR\x06vendor*\xf0\x01\n" +
	"\rHashAlgorithm\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\a\n" +
	"\x03MD5\x10\x01\x12\b\n" +
	"\x04SHA1\x10\x02\x12\n" +
	"\n" +
	"\x06SHA256\x10\x03\x12\n" +
	"\n" +
	"\x06SHA384\x10\x04\x12\n" +
	"\n" +
	"\x06SHA512\x10\x05\x12\f\n" +
	"\bSHA3_256\x10\x06\x12\f\n" +
	"\bSHA3_384\x10\a\x12\f\n" +
	"\bSHA3_512\x10\b\x12\x0f\n" +
	"\vBLAKE2B_256\x10\t\x12\x0f\n" +
	"\vBLAKE2B_384\x10\n" +
	"\x12\x0f\n" +
	"\vBLAKE2B_512\x10\v\x12\n" +
	"\n" +
	"\x06BLAKE3\x10\f\x12\a\n" +
	"\x03MD2\x10\r\x12\v\n" +
	"\aADLER32\x10\x0e\x12\a\n" +
	"\x03MD4\x10\x0f\x12\a\n" +
	"\x03MD6\x10\x10\x12\n" +
	"\n" +
	"\x06SHA224\x10\x11*\xb7\x03\n" +
	"\aPurpose\x12\x13\n" +
	"\x0fUNKNOWN_PURPOSE\x10\x00\x12\x0f\n" +
	"\vAPPLICATION\x10\x01\x12\v\n" +
	"\aARCHIVE\x10\x02\x12\a\n" +
	"\x03BOM\x10\x03\x12\x11\n" +
	"\rCONFIGURATION\x10\x04\x12\r\n" +
	"\tCONTAINER\x10\x05\x12\b\n" +
	"\x04DATA\x10\x06\x12\n" +
	"\n" +
	"\x06DEVICE\x10\a\x12\x11\n" +
	"\rDEVICE_DRIVER\x10\b\x12\x11\n" +
	"\rDOCUMENTATION\x10\t\x12\f\n" +
	"\bEVIDENCE\x10\n" +
	"\x12\x0e\n" +
	"\n" +
	"EXECUTABLE\x10\v\x12\b\n" +
	"\x04FILE\x10\f\x12\f\n" +
	"\bFIRMWARE\x10\r\x12\r\n" +
	"\tFRAMEWORK\x10\x0e\x12\v\n" +
	"\aINSTALL\x10\x0f\x12\v\n" +
	"\aLIBRARY\x10\x10\x12\x1a\n" +
	"\x16MACHINE_LEARNING_MODEL\x10\x11\x12\f\n" +
	"\bMANIFEST\x10\x12\x12\t\n" +
	"\x05MODEL\x10\x13\x12\n" +
	"\n" +
	"\x06MODULE\x10\x14\x12\x14\n" +
	"\x10OPERATING_SYSTEM\x10\x15\x12\t\n" +
	"\x05OTHER\x10\x16\x12\t\n" +
	"\x05PATCH\x10\x17\x12\f\n" +
	"\bPLATFORM\x10\x18\x12\x0f\n" +
	"\vREQUIREMENT\x10\x19\x12\n" +
	"\n" +
	"\x06SOURCE\x10\x1a\x12\x11\n" +
	"\rSPECIFICATION\x10\x1b\x12\b\n" +
	"\x04TEST\x10\x1c*a\n" +
	"\x16SoftwareIdentifierType\x12\x1b\n" +
	"\x17UNKNOWN_IDENTIFIER_TYPE\x10\x00\x12\b\n" +
	"\x04PURL\x10\x01\x12\t\n" +
	"\x05CPE22\x10\x02\x12\t\n" +
	"\x05CPE23\x10\x03\x12\n" +
	"\n" +
	"\x06GITOID\x10\x04B\xae\x01\n" +
	"\x15com.protobom.protobomB\tSbomProtoP\x01Z%github.com/protobom/protobom/pkg/sbom\xa2\x02\x03PPX\xaa\x02\x11Protobom.Protobom\xca\x02\x11Protobom\\Protobom\xe2\x02\x1dProtobom\\Protobom\\GPBMetadata\xea\x02\x12Protobom::Protobomb\x06proto3"

var (
	file_sbom_proto_rawDescOnce sync.Once
	file_sbom_proto_rawDescData []byte
)

func file_sbom_proto_rawDescGZIP() []byte {
	file_sbom_proto_rawDescOnce.Do(func() {
		file_sbom_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sbom_proto_rawDesc), len(file_sbom_proto_rawDesc)))
	})
	return file_sbom_proto_rawDescData
}

var file_sbom_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_sbom_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_sbom_proto_goTypes = []any{
	(HashAlgorithm)(0),                           // 0: protobom.protobom.HashAlgorithm
	(Purpose)(0),                                 // 1: protobom.protobom.Purpose
	(SoftwareIdentifierType)(0),                  // 2: protobom.protobom.SoftwareIdentifierType
	(DocumentType_SBOMType)(0),                   // 3: protobom.protobom.DocumentType.SBOMType
	(Edge_Type)(0),                               // 4: protobom.protobom.Edge.Type
	(ExternalReference_ExternalReferenceType)(0), // 5: protobom.protobom.ExternalReference.ExternalReferenceType
	(Node_NodeType)(0),                           // 6: protobom.protobom.Node.NodeType
	(*Document)(nil),                             // 7: protobom.protobom.Document
	(*DocumentType)(nil),                         // 8: protobom.protobom.DocumentType
	(*Edge)(nil),                                 // 9: protobom.protobom.Edge
	(*ExternalReference)(nil),                    // 10: protobom.protobom.ExternalReference
	(*Metadata)(nil),                             // 11: protobom.protobom.Metadata
	(*Node)(nil),                                 // 12: protobom.protobom.Node
	(*NodeList)(nil),                             // 13: protobom.protobom.NodeList
	(*Person)(nil),                               // 14: protobom.protobom.Person
	(*Property)(nil),                             // 15: protobom.protobom.Property
	(*SourceData)(nil),                           // 16: protobom.protobom.SourceData
	(*Tool)(nil),                                 // 17: protobom.protobom.Tool
	nil,                                          // 18: protobom.protobom.ExternalReference.HashesEntry
	nil,                                          // 19: protobom.protobom.Node.IdentifiersEntry
	nil,                                          // 20: protobom.protobom.Node.HashesEntry
	nil,                                          // 21: protobom.protobom.SourceData.HashesEntry
	(*timestamppb.Timestamp)(nil),                // 22: google.protobuf.Timestamp
}
var file_sbom_proto_depIdxs = []int32{
	11, // 0: protobom.protobom.Document.metadata:type_name -> protobom.protobom.Metadata
	13, // 1: protobom.protobom.Document.node_list:type_name -> protobom.protobom.NodeList
	3,  // 2: protobom.protobom.DocumentType.type:type_name -> protobom.protobom.DocumentType.SBOMType
	4,  // 3: protobom.protobom.Edge.type:type_name -> protobom.protobom.Edge.Type
	18, // 4: protobom.protobom.ExternalReference.hashes:type_name -> protobom.protobom.ExternalReference.HashesEntry
	5,  // 5: protobom.protobom.ExternalReference.type:type_name -> protobom.protobom.ExternalReference.ExternalReferenceType
	22, // 6: protobom.protobom.Metadata.date:type_name -> google.protobuf.Timestamp
	17, // 7: protobom.protobom.Metadata.tools:type_name -> protobom.protobom.Tool
	14, // 8: protobom.protobom.Metadata.authors:type_name -> protobom.protobom.Person
	8,  // 9: protobom.protobom.Metadata.documentTypes:type_name -> protobom.protobom.DocumentType
	16, // 10: protobom.protobom.Metadata.source_data:type_name -> protobom.protobom.SourceData
	6,  // 11: protobom.protobom.Node.type:type_name -> protobom.protobom.Node.NodeType
	14, // 12: protobom.protobom.Node.suppliers:type_name -> protobom.protobom.Person
	14, // 13: protobom.protobom.Node.originators:type_name -> protobom.protobom.Person
	22, // 14: protobom.protobom.Node.release_date:type_name -> google.protobuf.Timestamp
	22, // 15: protobom.protobom.Node.build_date:type_name -> google.protobuf.Timestamp
	22, // 16: protobom.protobom.Node.valid_until_date:type_name -> google.protobuf.Timestamp
	10, // 17: protobom.protobom.Node.external_references:type_name -> protobom.protobom.ExternalReference
	19, // 18: protobom.protobom.Node.identifiers:type_name -> protobom.protobom.Node.IdentifiersEntry
	20, // 19: protobom.protobom.Node.hashes:type_name -> protobom.protobom.Node.HashesEntry
	1,  // 20: protobom.protobom.Node.primary_purpose:type_name -> protobom.protobom.Purpose
	15, // 21: protobom.protobom.Node.properties:type_name -> protobom.protobom.Property
	12, // 22: protobom.protobom.NodeList.nodes:type_name -> protobom.protobom.Node
	9,  // 23: protobom.protobom.NodeList.edges:type_name -> protobom.protobom.Edge
	14, // 24: protobom.protobom.Person.contacts:type_name -> protobom.protobom.Person
	21, // 25: protobom.protobom.SourceData.hashes:type_name -> protobom.protobom.SourceData.HashesEntry
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_sbom_proto_init() }
func file_sbom_proto_init() {
	if File_sbom_proto != nil {
		return
	}
	file_sbom_proto_msgTypes[1].OneofWrappers = []any{}
	file_sbom_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sbom_proto_rawDesc), len(file_sbom_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sbom_proto_goTypes,
		DependencyIndexes: file_sbom_proto_depIdxs,
		EnumInfos:         file_sbom_proto_enumTypes,
		MessageInfos:      file_sbom_proto_msgTypes,
	}.Build()
	File_sbom_proto = out.File
	file_sbom_proto_goTypes = nil
	file_sbom_proto_depIdxs = nil
}
